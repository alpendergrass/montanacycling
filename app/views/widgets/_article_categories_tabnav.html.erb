<%  
# this partial renders a tabnav, you can call it in your views with:
#   <%= tabnav :article_categories % > (just the tabnav) 
# or, if you want a boxed tabnav:
#   <% tabnav :article_categories do % >
#     your html here
#   <% end % >
# (remove the space between % and >, we don't want to mess up your brand new tabnav :-))
#
# you can pass render_tabnav a few options:
#   :generate_css => true|false #=> generates a default inline css for the tabnav, defaults to false
#   :html => aHash #=> sets html options for the tabnav's div (es :html => {:class=> 'myCssClass', :id=>'myCssId'}) 
#     
article_categories = ArticleCategory.find(:all, :conditions => ["parent_id = ?", @top_level_article_category_id ], :order => "position")

if article_categories.any?
  render_tabnav :article_categories,
                :generate_css => false do

    if Article.find(:all, :conditions => ["article_category_id = ?", @top_level_article_category_id]).any?
      add_tab do |t|
        t.named "General"
        t.titled "General Information"
        #t.links_to :controller => 'article_categories', :action => :show, :id => @top_level_article_category_id
        t.links_to hash_for_article_category_path(:id => @top_level_article_category_id)
      end
    end
    for article_category in article_categories
      if Article.find(:all, :conditions => ["article_category_id = ?", article_category]).any?
        add_tab do |t|
          t.named article_category.name
          t.titled article_category.description
          #t.links_to :controller => 'article_categories', :action => :show, :id => article_category
          t.links_to hash_for_article_category_path(:id => article_category.id)  #using article_category without .id breaks highlighting
          #t.links_to :controller => 'article_categories', :action => :show, :id => article_category, :parent_id => @top_level_article_category_id
        end
      end
    end
  end
end 
%>